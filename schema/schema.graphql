"""Query"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  currentUser: User
  podcasts(after: String, first: Int, before: String, last: Int): PodcastConnection!
  podcastsByName(after: String, first: Int, before: String, last: Int, podcastName: String): PodcastConnection!
  podcastsByGenre(after: String, first: Int, before: String, last: Int, primaryGenre: String): PodcastConnection!
  podcast(_id: ID!): Podcast
  episodes(after: String, first: Int, before: String, last: Int, podcast: ID, name: String): EpisodeConnection!
  episode(_id: ID!): Episode
  userSubscribedToPodcast(_id: ID!): Boolean!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""UserType"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  email: String!
  subscriptions(after: String, first: Int, before: String, last: Int): PodcastConnection!
  subscribed(input: UserSubscribedInput!): Boolean
  createdAt: String!
  updatedAt: String!
}

"""A connection to a list of items."""
type PodcastConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [PodcastEdge]!
}

"""Information about pagination in a connection."""
type PageInfoExtended {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type PodcastEdge {
  """The item at the end of the edge"""
  node: Podcast

  """A cursor for use in pagination"""
  cursor: String!
}

"""PodcastType"""
type Podcast implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  appleId: Int!
  name: String!
  author: String!
  description: String!
  website: String!
  rss: String!
  image: String!
  episodes(after: String, first: Int, before: String, last: Int): EpisodeConnection!
  country: String!
  primaryGenre: String!
  genres: [String]
  genreIds: [String]
}

"""A connection to a list of items."""
type EpisodeConnection {
  """Number of items in this connection"""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
    This allows a client to fetch the first five objects by passing "5" as the
    argument to "first", then fetch the total count so it could display "5 of 83",
    for example.
  """
  totalCount: Int

  """Offset from start"""
  startCursorOffset: Int!

  """Offset till end"""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfoExtended!

  """A list of edges."""
  edges: [EpisodeEdge]!
}

"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge"""
  node: Episode

  """A cursor for use in pagination"""
  cursor: String!
}

"""EpisodeType"""
type Episode implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  title: String!
  description: String!
  publishedDate: String!
  link: String!
  image: String!
  audio: String!
  duration: String!
  podcast: Podcast!
}

"""Input payload for checking if user is subscribed to podcast"""
input UserSubscribedInput {
  _id: String!
}

type Mutation {
  UserSignInWithEmail(input: UserSignInWithEmailInput!): UserSignInWithEmailPayload
  UserSignUpWithEmail(input: UserSignUpWithEmailInput!): UserSignUpWithEmailPayload
  UserChangePassword(input: UserChangePasswordInput!): UserChangePasswordPayload
  UserSubscribeToPodcast(input: UserSubscribeToPodcastInput!): UserSubscribeToPodcastPayload
  UserUnsubscribeToPodcast(input: UserUnsubscribeToPodcastInput!): UserUnsubscribeToPodcastPayload
}

type UserSignInWithEmailPayload {
  token: String
  error: String
  success: String
  clientMutationId: String
}

input UserSignInWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignUpWithEmailPayload {
  token: String
  error: String
  success: String
  clientMutationId: String
}

input UserSignUpWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserChangePasswordPayload {
  error: String
  success: String
  clientMutationId: String
}

input UserChangePasswordInput {
  oldPassword: String!
  newPassword: String!
  clientMutationId: String
}

type UserSubscribeToPodcastPayload {
  user: UserEdge
  error: String
  clientMutationId: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!
}

input UserSubscribeToPodcastInput {
  _id: String!
  clientMutationId: String
}

type UserUnsubscribeToPodcastPayload {
  user: UserEdge
  error: String
  clientMutationId: String
}

input UserUnsubscribeToPodcastInput {
  _id: String!
  clientMutationId: String
}
